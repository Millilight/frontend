# THIS FILE IS GENERATED; DO NOT EDIT
input AddHeirInput {
  email: String!
  firstname: String!
  lastname: String!
}

type AddHeirResponse {
  heir_user: Heir!
}

input AskResetPasswordUserInput {
  email: String!
}

type AskResetPasswordUserResponse {
  success: Boolean!
}

type BankProduct {
  company: String!
  localization: String!
  type: String!
}

input BankProductInput {
  company: String!
  localization: String!
  type: String!
}

input ConfirmSecurityCodeInput {
  legator_user_id: ID!
  security_code: String!
}

type ConfirmSecurityCodeResponse {
  legator_user: Legator!
}

type ConsumerCredit {
  company: String!
  contract_number: String!
}

input ConsumerCreditInput {
  company: String!
  contract_number: String!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  password: String!
}

"""
Date custom scalar type
"""
scalar Date

type Heir {
  _id: ID!
  added_date: Date!
  security_code: String
  sensitive_data_unlocked: Boolean!
  sensitive_data_unlocked_date: Date
  state: StateTrust!
  urgent_data_unlocked: Boolean!
  urgent_data_unlocked_date: Date
  user_details: UserDetails!
}

type InsuranceProduct {
  company: String!
  localization: String!
  type: String!
}

input InsuranceProductInput {
  company: String!
  localization: String!
  type: String!
}

type InternetAccountToBeDeleted {
  site: String!
  username: String!
}

input InternetAccountToBeDeletedInput {
  site: String!
  username: String!
}

type Legator {
  _id: ID!
  added_date: Date!
  sensitive_data: SensitiveData
  sensitive_data_unlocked: Boolean!
  sensitive_data_unlocked_date: Date
  state: StateTrust!
  urgent_data: UrgentData
  urgent_data_unlocked: Boolean!
  urgent_data_unlocked_date: Date
  user_details: UserDetails!
}

type LoginResponse {
  access_token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  addHeir(add_heir_user_input: AddHeirInput!): AddHeirResponse!
  askResetPasswordUser(
    ask_reset_password_user_input: AskResetPasswordUserInput!
  ): AskResetPasswordUserResponse!
  confirmSecurityCode(
    confirm_security_code_input: ConfirmSecurityCodeInput!
  ): ConfirmSecurityCodeResponse!
  createUser(create_user_input: CreateUserInput!): User!
  login(login_user_input: LoginUserInput!): LoginResponse!
  resetPasswordUser(reset_password_user_input: ResetPasswordUserInput!): User!
  unlockUrgentData(
    unlock_urgent_data_input: UnlockUrgentDataInput!
  ): UnlockUrgentDataResponse!
  updateProcedures(update_procedures_input: UpdateProceduresInput!): Procedures!
  updateUser(update_user_input: UpdateUserInput!): User!
  updateWishes(update_wishes_input: UpdateWishesInput!): Wishes!
  verifyEmail(verify_email_input: VerifyEmailInput!): VerifyEmailResponse!
  verifyEmailWithInvitation(
    verify_email_with_invitation_input: VerifyEmailWithInvitationInput!
  ): VerifyEmailWithInvitationResponse!
  verifyNewEmail(verify_new_email_input: VerifyNewEmailInput!): User!
}

type Procedures {
  bank_products: [BankProduct!]!
  consumer_credits: [ConsumerCredit!]!
  insurance_products: [InsuranceProduct!]!
  internet_accounts_to_be_deleted: [InternetAccountToBeDeleted!]!
  properties: [RealEstate!]!
  vehicles: [Vehicle!]!
}

type Query {
  user: User!
}

type RealEstate {
  localization: String!
  type: String!
}

input RealEstateInput {
  localization: String!
  type: String!
}

input ResetPasswordUserInput {
  new_password: String!
  token: String!
  user_id: ID!
}

type SensitiveData {
  procedures: Procedures!
  user_id: ID!
}

enum StateTrust {
  INVITATION_SENT
  VALIDATED
}

input UnlockUrgentDataInput {
  legator_user_id: ID!
}

type UnlockUrgentDataResponse {
  success: Boolean!
}

input UpdateProceduresInput {
  bank_products: [BankProductInput!]
  consumer_credits: [ConsumerCreditInput!]
  insurance_products: [InsuranceProductInput!]
  internet_accounts_to_be_deleted: [InternetAccountToBeDeletedInput!]
  properties: [RealEstateInput!]
  vehicles: [VehicleInput!]
}

input UpdateUserInput {
  firstname: String
  lastname: String
  new_email: String
  password: String
}

input UpdateWishesInput {
  burial_cremation: String
  burial_cremation_place: String
  coffin: String
  list_of_people: String
  music: String
  ornament: String
  other: String
  place: String
  prevoyance: String
  religion: String
  text: String
}

type UrgentData {
  user_id: ID!
  wishes: Wishes!
}

type User {
  _id: ID!
  email: String!
  firstname: String!
  heirs: [Heir!]!
  lastname: String!
  legators: [Legator!]!
  sensitive_data: SensitiveData!
  urgent_data: UrgentData!
}

type UserDetails {
  email: String!
  firstname: String!
  lastname: String!
}

type Vehicle {
  registration_number: String!
  type: String!
}

input VehicleInput {
  registration_number: String!
  type: String!
}

input VerifyEmailInput {
  token: String!
  user_id: ID!
}

type VerifyEmailResponse {
  success: Boolean!
}

input VerifyEmailWithInvitationInput {
  password: String!
  token: String!
  user_id: ID!
}

type VerifyEmailWithInvitationResponse {
  success: Boolean!
}

input VerifyNewEmailInput {
  token: String!
  user_id: ID!
}

type Wishes {
  burial_cremation: String
  burial_cremation_place: String
  coffin: String
  list_of_people: String
  music: String
  ornament: String
  other: String
  place: String
  prevoyance: String
  religion: String
  text: String
}
